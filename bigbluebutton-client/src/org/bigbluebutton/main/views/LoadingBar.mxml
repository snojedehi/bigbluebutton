<?xml version="1.0" encoding="utf-8"?>

<!--

BigBlueButton open source conferencing system - http://www.bigbluebutton.org/

Copyright (c) 2012 BigBlueButton Inc. and by respective authors (see below).

This program is free software; you can redistribute it and/or modify it under the
terms of the GNU Lesser General Public License as published by the Free Software
Foundation; either version 3.0 of the License, or (at your option) any later
version.

BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along
with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.

-->

<mx:VBox xmlns:mate="http://mate.asfusion.com/"
		 xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 creationComplete="onCreationComplete()">

	<fx:Declarations>
		<mate:Listener type="{ModuleLoadEvent.MODULE_LOADING_STARTED}"
					   method="moduleLoadingStarted" />
		<mate:Listener type="{ModuleLoadEvent.MODULE_LOAD_PROGRESS}"
					   method="moduleLoadProgress" />
		<mate:Listener type="{ModuleLoadEvent.ALL_MODULES_LOADED}"
					   method="allModulesLoaded" />
		<mate:Listener type="{PortTestEvent.TEST_RTMP}"
					   method="testRTMP" />
		<mate:Listener type="{PortTestEvent.PORT_TEST_UPDATE}"
					   method="testRTMPupdate" />
		<mate:Listener type="{PortTestEvent.TUNNELING_FAILED}"
					   method="tunnelingFailed" />
	</fx:Declarations>

	<fx:Script>
		<![CDATA[
			import org.as3commons.logging.api.ILogger;
			import org.as3commons.logging.api.getClassLogger;
			import org.bigbluebutton.core.BBB;
			import org.bigbluebutton.core.UsersUtil;
			import org.bigbluebutton.main.events.ModuleLoadEvent;
			import org.bigbluebutton.main.events.PortTestEvent;
			import org.bigbluebutton.util.ConnUtil;
			import org.bigbluebutton.util.browser.BrowserCheck;
			import org.bigbluebutton.util.i18n.ResourceUtil;

			private static const LOGGER:ILogger = getClassLogger(LoadingBar);

			private var modules:Dictionary = new Dictionary();

			private var numModules:int = 0;

			private var portUpdateStr:String = 'Connecting to the server';
			
			private var portTestTimeout:Timer = new Timer(10000, 1);

			private function onCreationComplete():void {
				portTestTimeout.addEventListener(TimerEvent.TIMER, loadingUpdateTimeout);
			}
			
			private function moduleLoadingStarted(e:ModuleLoadEvent):void {
				numModules = BBB.getConfigManager().config.numberOfModules();
				loadingbarLabel.text = ResourceUtil.getInstance().getString('bbb.mainshell.statusProgress.loading');
				this.visible = true;
				
				portTestTimeout.stop();
			}

			private function moduleLoadProgress(e:ModuleLoadEvent):void {
				modules[e.moduleName] = e.progress;
				updateProgress();
			}

			private function updateProgress():void {
				var totalProgress:Number = 0;
				for (var key:Object in modules) {
					var progress:Number = modules[key] as Number;
					totalProgress += progress;
				}

				ExternalInterface.call("setProgressBar", int(totalProgress / numModules));
				//LogUtil.debug("Progress: " + totalProgress);
				progressBar.setProgress(totalProgress / numModules, 100);
			}

			private function allModulesLoaded(e:ModuleLoadEvent):void {
				ExternalInterface.call("removeProgressBar");
				if (parent != null)
					parent.removeChild(this);
			}

			private function testRTMP(e:PortTestEvent):void {
				//- Cannot get locale string this early in loading process
				loadingbarLabel.text = portUpdateStr; //ResourceUtil.getInstance().getString('bbb.mainshell.statusProgress.connecting');
				
				portTestTimeout.start();
			}

			private function testRTMPupdate(e:PortTestEvent):void {
				//- Cannot get locale string this early in loading process
				portUpdateStr += "...";
				loadingbarLabel.text = portUpdateStr; //ResourceUtil.getInstance().getString('bbb.mainshell.statusProgress.connecting');
			}

			private function tunnelingFailed(e:PortTestEvent):void {
				loadingbarLabel.text = ResourceUtil.getInstance().getString('bbb.mainshell.statusProgress.cannotConnectServer');
				
				portTestTimeout.stop();
			}
			
			public function loadingFailed(message:String):void {
				loadingbarLabel.text = message;
				
				portTestTimeout.stop();
			}
			
			private function loadingUpdateTimeout(e:TimerEvent):void {
				// Have to figure out the protocol first
				var hostname:String = BBB.initConnectionManager().portTestHost;
				var pattern:RegExp = /(?P<protocol>.+):\/\/(?P<server>.+)/;
				var result:Array = pattern.exec(hostname);
				
				if (Capabilities.os == "Windows 10" && BrowserCheck.isFirefox() && BrowserCheck.browserMajorVersion >= "62" && result.protocol == ConnUtil.RTMPS) {
					loadingbarLabel.text = ResourceUtil.getInstance().getString("bbb.mainshell.statusProgress.connectingTimeout");
					
					var logData:Object = UsersUtil.initLogData();
					logData.tags = ["initialization", "loading-bar", "connection"];
					logData.message = "Timeout expired while waiting for the port test";
					logData.logCode = "loading_bar_timeout_hit";
					LOGGER.info(JSON.stringify(logData));
				}
			}
		]]>
	</fx:Script>

	<mx:ProgressBar width="280"
					height="15"
					id="progressBar"
					labelWidth="0"
					minimum="0"
					maximum="100"
					mode="manual" />
	<mx:Label id="loadingbarLabel" styleName="loadingBarLabel"/>

</mx:VBox>
